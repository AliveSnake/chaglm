"""
Django settings for grape project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from decouple import config
import os
from datetime import timedelta


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-xtma_kwzyqz4$36=9470ah%pot$de!v256#23ac3w^(kq$kf7f"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('GXG_DEBUG',cast=bool)

ALLOWED_HOSTS = ['gxg.agromodel.cn','127.0.0.1','118.89.50.72']

CSRF_TRUSTED_ORIGINS=['https://*.gxg.agromodel.cn/']
# Application definition

INSTALLED_APPS = [
    "user.apps.UserConfig",
    "grapeapp.apps.GrapeappConfig",
    "master_data.apps.MasterDataConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'django_filters',
    'rest_framework',
    'rest_framework_simplejwt',
    'field.apps.AddFieldsConfig',
    'crop.apps.CropConfig',
    'weather.apps.WeatherConfig',
    'note.apps.NoteConfig',
    'phenmodel.apps.PhenmodelConfig',
    'task.apps.TaskConfig',
    'django_apscheduler',
    'notice.apps.NoticeConfig',
    'disease.apps.DiseaseConfig',
    'weatherdata.apps.WeatherdataConfig',
    'phendata.apps.PhendataConfig',
    'diseasedata.apps.DiseasedataConfig',
    'apitest.apps.ApitestConfig',
    'yolo.apps.YoloConfig',
    'vitgpt.apps.VitgptConfig',
    'message.apps.MessageConfig',
    'forum.apps.ForumConfig',
    'api.apps.ApiConfig',
    'channels',
    'corsheaders',
    'warn.apps.WarnConfig',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'corsheaders.middleware.CorsMiddleware',
    
]

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://118.89.50.72",
    "http://127.0.0.1",
    "http://localhost:5173",
    "http://localhost:5174",
]


STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage" 
ROOT_URLCONF = "grape.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "grape.wsgi.application"
ASGI_APPLICATION = "grape.asgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('GXG_DB_NAME'),
        'USER': config('GXG_DB_USER'),
        'PASSWORD': config('GXG_DB_PASSWORD'),
        'HOST': config('GXG_DB_HOST'),
        'PORT': config('GXG_DB_PORT'),
        'POOL': {
            'max_conn': 20,  # 最大连接数
            'min_conn': 5,   # 最小连接数
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "zh-hans"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_URL = "static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR,"static")]
STATIC_ROOT = os.path.join(BASE_DIR,"grape/static")
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
APPSCHEDULER_API_ENABLED = True

# permissions
REST_FRAMEWORK = {
    # 'DEFAULT_AUTHENTICATION_CLASSES': (
    #     # 'rest_framework_simplejwt.authentication.JWTAuthentication',
    # ),
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
    ],
    'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',
    'DATE_FORMAT': '%Y-%m-%d',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100,
    'DEFAULT_SCHEMA_CLASS':'rest_framework.schemas.coreapi.AutoSchema',
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     'rest_framework.permissions.IsAuthenticated',
    # ],
    # 'DEFAULT_THROTTLE_CLASSES': [
    #     'rest_framework.throttling.AnonRateThrottle',
    #     'rest_framework.throttling.UserRateThrottle'
    # ],
    # 'DEFAULT_THROTTLE_RATES': {
    #     'anon': '100000/day',
    #     'user': '1000000/day'
    # }
}


# JWT 设置
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),  # minutes=60
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(days=1),  # minutes=60
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=7),
}

AP_SCHEDULER = {
    'jobstores': {
        'default': {
            'type': 'djangojobstore',
        },
    },
    'executors': {
        'default': {
            'class': 'apscheduler.executors.pool:ThreadPoolExecutor',
            'max_workers': '10',
        },
    },
    'job_defaults': {
        'coalesce': True,       # 合并执行
        'max_instances': '1',   # 最大实例数
        'misfire_grace_time': 3600,  # 允许的错过时间
    },
    'timezone': 'Asia/Shanghai',  # 设置时区
}

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}
# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels_redis.core.RedisChannelLayer',
#         'CONFIG': {
#             "hosts": [('127.0.0.1', 6379)],
#         },
#     },
# }
